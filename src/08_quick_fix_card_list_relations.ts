import { createClient } from '@supabase/supabase-js';
import { env } from './lib/env';

// Configura√ß√£o do Supabase
const supabaseUrl = env.SUPABASE_URL;
const supabaseKey = env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function quickFixCardListRelations() {
  console.log('üîß Iniciando corre√ß√£o r√°pida dos relacionamentos entre cards e lists...\n');
  
  try {
    // 1. Obter board ID
    const { data: boards, error: boardError } = await supabase
      .from('boards')
      .select('id, name')
      .limit(1);
    
    if (boardError || !boards || boards.length === 0) {
      throw new Error('Nenhum board encontrado');
    }
    
    const boardId = boards[0].id;
    console.log(`‚úÖ Board: ${boards[0].name} (ID: ${boardId})\n`);
    
    // 2. Verificar situa√ß√£o atual
    console.log('üìä Verificando situa√ß√£o atual...');
    
    const { data: currentStatus, error: statusError } = await supabase
      .from('cards')
      .select('current_list_id, current_list_trello_id')
      .eq('board_id', boardId);
    
    if (statusError) {
      throw new Error(`Erro ao verificar status: ${statusError.message}`);
    }
    
    const totalCards = currentStatus?.length || 0;
    const cardsWithoutListId = currentStatus?.filter(c => !c.current_list_id).length || 0;
    const cardsWithListId = totalCards - cardsWithoutListId;
    
    console.log(`üìà Status atual:`);
    console.log(`   Total de cards: ${totalCards}`);
    console.log(`   Cards com list_id: ${cardsWithListId}`);
    console.log(`   Cards sem list_id: ${cardsWithoutListId}\n`);
    
    if (cardsWithoutListId === 0) {
      console.log('‚úÖ Todos os cards j√° t√™m list_id! Nenhuma corre√ß√£o necess√°ria.\n');
      return;
    }
    
    // 3. Aplicar corre√ß√£o autom√°tica usando a fun√ß√£o RPC existente
    console.log('üîß Aplicando corre√ß√£o autom√°tica...');
    
    const { error: backfillError } = await supabase.rpc('backfill_card_list_id', {
      p_board_id: boardId
    });
    
    if (backfillError) {
      console.log(`‚ö†Ô∏è Erro no backfill autom√°tico: ${backfillError.message}`);
      console.log('üîÑ Tentando corre√ß√£o manual...\n');
      
      // Corre√ß√£o manual
      await manualFix();
    } else {
      console.log('‚úÖ Corre√ß√£o autom√°tica executada com sucesso!\n');
    }
    
    // 4. Verificar resultado
    console.log('üîç Verificando resultado...');
    
    const { data: afterFix, error: afterError } = await supabase
      .from('cards')
      .select('current_list_id, current_list_trello_id')
      .eq('board_id', boardId);
    
    if (afterError) {
      throw new Error(`Erro ao verificar ap√≥s corre√ß√£o: ${afterError.message}`);
    }
    
    const cardsFixed = afterFix?.filter(c => c.current_list_id).length || 0;
    const cardsStillWithoutId = totalCards - cardsFixed;
    
    console.log(`üìä Resultado ap√≥s corre√ß√£o:`);
    console.log(`   Total de cards: ${totalCards}`);
    console.log(`   Cards com list_id: ${cardsFixed}`);
    console.log(`   Cards sem list_id: ${cardsStillWithoutId}`);
    
    if (cardsStillWithoutId === 0) {
      console.log('\nüéâ PERFEITO! Todos os relacionamentos foram corrigidos!\n');
    } else {
      console.log(`\n‚ö†Ô∏è Ainda existem ${cardsStillWithoutId} cards sem list_id.`);
      console.log('   Pode ser necess√°rio verificar se todas as lists est√£o sincronizadas.\n');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error);
    process.exit(1);
  }
}

async function manualFix() {
  console.log('üîß Aplicando corre√ß√£o manual...');
  
  try {
    // Buscar cards que precisam de corre√ß√£o
    const { data: cardsToFix, error: selectError } = await supabase
      .from('cards')
      .select('id, current_list_trello_id')
      .is('current_list_id', null)
      .not('current_list_trello_id', 'is', null);
    
    if (selectError) {
      console.log(`‚ö†Ô∏è Erro ao buscar cards para corre√ß√£o: ${selectError.message}`);
      return;
    }
    
    if (!cardsToFix || cardsToFix.length === 0) {
      console.log('‚úÖ Nenhum card precisa de corre√ß√£o manual');
      return;
    }
    
    console.log(`üîß Corrigindo ${cardsToFix.length} cards...`);
    
    let fixedCount = 0;
    
    // Corrigir cada card individualmente
    for (const card of cardsToFix) {
      if (!card.current_list_trello_id) continue;
      
      // Buscar a list correspondente
      const { data: list, error: listError } = await supabase
        .from('lists')
        .select('id')
        .eq('trello_id', card.current_list_trello_id)
        .eq('closed', false)
        .single();
      
      if (listError || !list) {
        console.log(`‚ö†Ô∏è List n√£o encontrada para card ${card.id} (trello_id: ${card.current_list_trello_id})`);
        continue;
      }
      
      // Atualizar o card
      const { error: updateError } = await supabase
        .from('cards')
        .update({ current_list_id: list.id })
        .eq('id', card.id);
      
      if (updateError) {
        console.log(`‚ö†Ô∏è Erro ao corrigir card ${card.id}: ${updateError.message}`);
      } else {
        fixedCount++;
      }
    }
    
    console.log(`‚úÖ ${fixedCount} cards corrigidos manualmente`);
    
  } catch (error) {
    console.log(`‚ö†Ô∏è Erro na corre√ß√£o manual: ${error}`);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  quickFixCardListRelations().catch(console.error);
}

export { quickFixCardListRelations };
